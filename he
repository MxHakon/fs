// ==UserScript==
// @name         Tiller Auto Typer - Draggable
// @namespace    http://tampermonkey.net/
// @version      6.0
// @description  Auto types letters - Press MINUS key to toggle - Draggable UI
// @author       AutoTyper
// @match        https://tillerquest.tiller.blog/*
// @grant        none
// @run-at       document-end
// ==/UserScript==

(function() {
    'use strict';

    console.log('üöÄ TILLER AUTO TYPER STARTING...');

    let autoTypeEnabled = false;
    let isTyping = false;
    let statusIndicator;

    function forceCreateUI() {
        console.log('üé® FORCE CREATING DRAGGABLE UI...');

        const existing = document.getElementById('auto-typer-ui');
        if (existing) {
            existing.remove();
            console.log('üóëÔ∏è Removed existing UI');
        }

        const indicator = document.createElement('div');
        indicator.id = 'auto-typer-ui';

        indicator.innerHTML = `
            <div id="drag-handle" style="font-size: 20px; font-weight: bold; margin-bottom: 10px; cursor: move; padding: 5px; background: rgba(255,255,255,0.1); border-radius: 5px;">ü§ñ AUTO TYPER</div>
            <div id="status-display" style="font-size: 16px; padding: 8px; background: rgba(255,255,255,0.2); border-radius: 5px; margin: 8px 0;">
                STATUS: OFF
            </div>
            <div id="letter-display" style="font-size: 14px; margin: 8px 0; color: yellow;">
                LETTER: Searching...
            </div>
            <div style="font-size: 12px; margin-top: 10px; opacity: 0.9; line-height: 1.4;">
                Press <strong>-</strong> (minus) to toggle<br>
                Press <strong>=</strong> (equals) to stop
            </div>
        `;

        indicator.style.cssText = `
            position: fixed !important;
            bottom: 20px !important;
            right: 20px !important;
            width: 220px !important;
            background: linear-gradient(135deg, #1a1a2e, #16213e) !important;
            color: white !important;
            padding: 20px !important;
            border-radius: 15px !important;
            font-family: 'Arial', sans-serif !important;
            text-align: center !important;
            z-index: 999999999 !important;
            border: 3px solid #00ff41 !important;
            box-shadow: 0 0 25px rgba(0, 255, 65, 0.5) !important;
            display: block !important;
            visibility: visible !important;
            opacity: 1 !important;
            transform: none !important;
            user-select: none !important;
        `;

        const forceAppend = () => {
            try {
                if (document.body) {
                    document.body.appendChild(indicator);
                    console.log('‚úÖ UI ADDED TO BODY');
                    setupDragFunctionality(indicator);
                } else if (document.documentElement) {
                    document.documentElement.appendChild(indicator);
                    console.log('‚úÖ UI ADDED TO HTML');
                    setupDragFunctionality(indicator);
                } else {
                    document.appendChild(indicator);
                    console.log('‚úÖ UI ADDED TO DOCUMENT');
                    setupDragFunctionality(indicator);
                }
            } catch (e) {
                console.error('‚ùå Failed to add UI:', e);
                setTimeout(forceAppend, 500);
            }
        };

        forceAppend();

        setTimeout(() => {
            const check = document.getElementById('auto-typer-ui');
            if (check) {
                console.log('‚úÖ UI EXISTS AND IS VISIBLE');
                check.style.display = 'block';
                check.style.visibility = 'visible';
            } else {
                console.log('‚ùå UI NOT FOUND, RETRYING...');
                forceCreateUI();
            }
        }, 1000);

        return indicator;
    }

    function setupDragFunctionality(element) {
        const dragHandle = element.querySelector('#drag-handle');
        let isDragging = false;
        let startX, startY, startLeft, startTop;

        dragHandle.addEventListener('mousedown', function(e) {
            isDragging = true;

            const rect = element.getBoundingClientRect();
            startX = e.clientX;
            startY = e.clientY;
            startLeft = rect.left;
            startTop = rect.top;

            dragHandle.style.cursor = 'grabbing';
            element.style.transition = 'none';
            element.style.userSelect = 'none';

            document.body.style.userSelect = 'none';

            e.preventDefault();
            e.stopPropagation();

            console.log('üñ±Ô∏è Started dragging');
        });

        document.addEventListener('mousemove', function(e) {
            if (!isDragging) return;

            const deltaX = e.clientX - startX;
            const deltaY = e.clientY - startY;

            let newLeft = startLeft + deltaX;
            let newTop = startTop + deltaY;

            const maxLeft = window.innerWidth - element.offsetWidth;
            const maxTop = window.innerHeight - element.offsetHeight;

            newLeft = Math.max(0, Math.min(newLeft, maxLeft));
            newTop = Math.max(0, Math.min(newTop, maxTop));

            element.style.left = newLeft + 'px';
            element.style.top = newTop + 'px';
            element.style.bottom = 'auto';
            element.style.right = 'auto';

            e.preventDefault();
        });

        document.addEventListener('mouseup', function(e) {
            if (isDragging) {
                isDragging = false;
                dragHandle.style.cursor = 'move';
                element.style.transition = 'all 0.3s ease';
                document.body.style.userSelect = '';

                console.log('üñ±Ô∏è Stopped dragging');
                e.preventDefault();
            }
        });

        dragHandle.addEventListener('dragstart', function(e) {
            e.preventDefault();
            return false;
        });

        console.log('‚úÖ Drag functionality setup complete');
    }

    function updateUI(letter = '', info = '') {
        if (!statusIndicator) {
            statusIndicator = forceCreateUI();
        }

        const statusDisplay = document.getElementById('status-display');
        const letterDisplay = document.getElementById('letter-display');

        if (statusDisplay) {
            statusDisplay.textContent = autoTypeEnabled ? 'STATUS: ON ‚úÖ' : 'STATUS: OFF ‚ùå';
            statusDisplay.style.background = autoTypeEnabled ? 'rgba(0,255,0,0.3)' : 'rgba(255,255,255,0.2)';
        }

        if (letterDisplay) {
            letterDisplay.textContent = letter ? `LETTER: "${letter}"` : 'LETTER: None found';
            letterDisplay.style.color = letter ? '#00ff00' : '#ffff00';
        }

        if (statusIndicator) {
            statusIndicator.style.borderColor = autoTypeEnabled ? '#00ff00' : '#00ff41';
        }

        console.log(`üìä UI Updated - Status: ${autoTypeEnabled ? 'ON' : 'OFF'}, Letter: "${letter}"`);
    }

    function getKeyCode(char) {
        const codes = {
            ' ': 'Space',
            '(': 'Digit9',
            ')': 'Digit0',
            ',': 'Comma',
            '.': 'Period',
            '-': 'Minus',
            '=': 'Equal'
        };
        return codes[char] || `Key${char.toUpperCase()}`;
    }

    function getAllLettersToType() {
        console.log('üîç GRABBING ALL LETTERS AT ONCE...');

        const spans = document.querySelectorAll('span');
        const lettersToType = [];

        for (let i = 0; i < spans.length; i++) {
            const span = spans[i];
            const text = span.textContent;

            if (text.length === 1) {
                const classes = span.className || '';
                const style = window.getComputedStyle(span);
                const bgColor = style.backgroundColor;

                const isGreen = classes.includes('bg-green-700') ||
                               classes.includes('bg-green') ||
                               bgColor.includes('rgb(21, 128, 61)') ||
                               bgColor.includes('green');

                if (!isGreen) {
                    lettersToType.push(text);
                }
            }
        }

        console.log(`‚úÖ FOUND ${lettersToType.length} LETTERS TO TYPE:`, lettersToType.join(''));
        return lettersToType;
    }

    function typeAllLettersInstantly(letters) {
        console.log(`üöÄ BATCH TYPING ${letters.length} LETTERS INSTANTLY!`);

        let index = 0;

        const batchType = () => {
            if (!autoTypeEnabled || index >= letters.length) {
                console.log('‚úÖ FINISHED BATCH TYPING');
                stopAutoTyping();
                return;
            }

            const char = letters[index];
            const displayChar = char === ' ' ? 'SPACE' : char;

            const letterDisplay = document.getElementById('letter-display');
            if (letterDisplay) {
                letterDisplay.textContent = `BATCH: ${index + 1}/${letters.length} - ${displayChar}`;
                letterDisplay.style.color = '#ff00ff';
            }

            typeCharInstant(char);

            index++;

            if (autoTypeEnabled && index < letters.length) {
                setTimeout(batchType, 1);
            }
        };

        batchType();
    }

    function typeCharInstant(char) {
        try {
            const activeEl = document.activeElement || document.body;
            activeEl.focus();

            if (document.execCommand) {
                document.execCommand('insertText', false, char);
                return;
            }
        } catch (e) {}

        const keyCode = char.charCodeAt(0);
        const activeEl = document.activeElement || document.body;

        const events = [
            new KeyboardEvent('keydown', {
                key: char,
                code: getKeyCode(char),
                keyCode: keyCode,
                which: keyCode,
                bubbles: true,
                cancelable: true,
                view: window
            }),
            new KeyboardEvent('keypress', {
                key: char,
                code: getKeyCode(char),
                keyCode: keyCode,
                which: keyCode,
                charCode: keyCode,
                bubbles: true,
                cancelable: true,
                view: window
            }),
            new KeyboardEvent('keyup', {
                key: char,
                code: getKeyCode(char),
                keyCode: keyCode,
                which: keyCode,
                bubbles: true,
                cancelable: true,
                view: window
            })
        ];

        events.forEach(event => activeEl.dispatchEvent(event));
    }

    function startAutoTyping() {
        if (isTyping) return;

        console.log('üöÄ STARTING BATCH TYPING MODE');
        isTyping = true;

        const allLetters = getAllLettersToType();

        if (allLetters.length === 0) {
            console.log('‚ùå No letters found to type');
            updateUI('', 'No letters found');
            stopAutoTyping();
            return;
        }

        updateUI('BATCH', `Found ${allLetters.length} letters - starting batch type`);

        setTimeout(() => {
            typeAllLettersInstantly(allLetters);
        }, 100);
    }

    function stopAutoTyping() {
        console.log('‚èπÔ∏è STOPPING AUTO TYPING');
        isTyping = false;
    }

    function toggle() {
        autoTypeEnabled = !autoTypeEnabled;
        console.log(`üîÑ TOGGLED: ${autoTypeEnabled ? 'ON' : 'OFF'}`);

        updateUI();

        if (autoTypeEnabled) {
            startAutoTyping();
        } else {
            stopAutoTyping();
        }
    }

    function setupKeyboard() {
        console.log('‚å®Ô∏è Setting up MINUS key listener...');

        document.addEventListener('keydown', function(e) {
            console.log(`Key pressed: "${e.key}" (code: ${e.code})`);

            if (e.key === '-' || e.code === 'Minus') {
                e.preventDefault();
                toggle();
            } else if (e.key === '=' || e.code === 'Equal') {
                e.preventDefault();
                autoTypeEnabled = false;
                stopAutoTyping();
                updateUI();
            }
        }, true);
    }

    function initialize() {
        console.log('üöÄ INITIALIZING...');

        statusIndicator = forceCreateUI();
        updateUI();

        setupKeyboard();

        setTimeout(() => {
            getAllLettersToType();
        }, 2000);

        console.log('‚úÖ INITIALIZATION COMPLETE');
        console.log('üìã Press MINUS (-) to toggle auto-typing');
        console.log('üìã Press EQUALS (=) to stop');
    }

    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initialize);
    } else {
        setTimeout(initialize, 100);
    }

    setTimeout(initialize, 1000);
    setTimeout(initialize, 3000);

})();
